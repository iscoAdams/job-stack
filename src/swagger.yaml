openapi: 3.0.0
info:
  title: job-stack-api
  contact: {}
  version: '1.0'
servers:
- url: https://job-stack.herokuapp.com/api/v1
  variables: {}
paths:
  /jobs/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: The Job ID
    get:
      tags:
      - jobs
      summary: getJob
      operationId: getJob
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
    patch:
      tags:
      - jobs
      summary: updateJob
      operationId: updateJob
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateJobRequest'
            example:
              position: cto
              company: amazon
              status: interview
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
    delete:
      tags:
      - jobs
      summary: deleteJob
      operationId: deleteJob
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
  /jobs:
    get:
      tags:
      - jobs
      summary: getAllJobs
      operationId: getAllJobs
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
    post:
      tags:
      - jobs
      summary: createJob
      operationId: createJob
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createJobRequest'
            example:
              position: ceo
              company: amazon
              status: hired
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
  /register:
    post:
      tags:
      - Auth
      summary: register
      operationId: register
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/registerrequest'
            example:
              name: adam
              email: adam@gmail.om
              password: '@2796317pP'
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security: []
  /login:
    post:
      tags:
      - Auth
      summary: login
      operationId: login
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/loginrequest'
            example:
              email: yassa@gmail.om
              password: '@2796317pP'
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security: []
components:
  schemas:
    updateJobRequest:
      title: updateJobRequest
      required:
      - position
      - company
      - status
      type: object
      properties:
        position:
          type: string
        company:
          type: string
        status:
          type: string
      example:
        position: cto
        company: amazon
        status: interview
    createJobRequest:
      title: createJobRequest
      required:
      - position
      - company
      - status
      type: object
      properties:
        position:
          type: string
        company:
          type: string
        status:
          type: string
      example:
        position: ceo
        company: amazon
        status: hired
    registerrequest:
      title: registerrequest
      required:
      - name
      - email
      - password
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
      example:
        name: adam
        email: adam@gmail.om
        password: '@2796317pP'
    loginrequest:
      title: loginrequest
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      example:
        email: yassa@gmail.om
        password: '@2796317pP'
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
security: []
tags:
- name: jobs
- name: Auth